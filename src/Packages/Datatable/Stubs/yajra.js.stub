/**
 * {{ modelClass }} DataTable JavaScript functionality
 * Generated by AutoGen DataTable Package
 */

$(document).ready(function() {
    // Initialize DataTable
    const table = $('#{{ routeName }}-table').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '{{ route("{{ routeName }}.data") }}',
            type: 'POST',
            data: function(d) {
                // Add custom search parameters
                if ($('#search_name').length && $('#search_name').val()) {
                    d.search_name = $('#search_name').val();
                }
                if ($('#search_email').length && $('#search_email').val()) {
                    d.search_email = $('#search_email').val();
                }
                if ($('#date_from').length && $('#date_from').val()) {
                    d.date_from = $('#date_from').val();
                }
                if ($('#date_to').length && $('#date_to').val()) {
                    d.date_to = $('#date_to').val();
                }
            },
            error: function(xhr, error, thrown) {
                console.error('DataTable AJAX error:', error);
                showNotification('Error loading data. Please try again.', 'error');
            }
        },
        columns: [
            {{ withBulk ? "{ data: 'select', name: 'select', orderable: false, searchable: false, className: 'text-center' }," : "" }}
            { data: 'id', name: 'id', className: 'text-center' },
            { data: 'name', name: 'name' },
            { data: 'email', name: 'email' },
            { data: 'created_at', name: 'created_at', className: 'text-center' },
            { data: 'actions', name: 'actions', orderable: false, searchable: false, className: 'text-center' }
        ],
        order: [[{{ withBulk ? '1' : '0' }}, 'asc']],
        pageLength: 15,
        lengthMenu: [[10, 15, 25, 50, 100], [10, 15, 25, 50, 100]],
        {{ cache ? "stateSave: true," : "" }}
        {{ virtualScroll ? "scrollY: '400px',
        scrollCollapse: true,
        scroller: {
            displayBuffer: 10,
            boundaryScale: 0.5
        }," : "" }}
        responsive: true,
        autoWidth: false,
        language: {
            processing: '<div class="spinner-border spinner-border-sm" role="status"><span class="sr-only">Loading...</span></div> Loading...',
            emptyTable: 'No {{ modelVariablePlural }} found',
            zeroRecords: 'No matching {{ modelVariablePlural }} found',
            info: 'Showing _START_ to _END_ of _TOTAL_ {{ modelVariablePlural }}',
            infoEmpty: 'Showing 0 to 0 of 0 {{ modelVariablePlural }}',
            infoFiltered: '(filtered from _MAX_ total {{ modelVariablePlural }})',
            search: 'Search {{ modelVariablePlural }}:',
            lengthMenu: 'Show _MENU_ {{ modelVariablePlural }}',
            paginate: {
                first: 'First',
                last: 'Last',
                next: 'Next',
                previous: 'Previous'
            }
        },
        dom: 'Bfrtip',
        buttons: [
            {{ withExports ? "{
                extend: 'excel',
                text: '<i class=\"fas fa-file-excel\"></i> Excel',
                className: 'btn btn-success btn-sm',
                exportOptions: {
                    columns: ':visible:not(.no-export)'
                }
            },
            {
                extend: 'csv',
                text: '<i class=\"fas fa-file-csv\"></i> CSV',
                className: 'btn btn-info btn-sm',
                exportOptions: {
                    columns: ':visible:not(.no-export)'
                }
            },
            {
                extend: 'pdf',
                text: '<i class=\"fas fa-file-pdf\"></i> PDF',
                className: 'btn btn-danger btn-sm',
                exportOptions: {
                    columns: ':visible:not(.no-export)'
                },
                customize: function(doc) {
                    doc.content[1].table.widths = ['10%', '30%', '30%', '15%', '15%'];
                    doc.styles.tableHeader.fontSize = 10;
                    doc.styles.tableBodyEven.fontSize = 9;
                    doc.styles.tableBodyOdd.fontSize = 9;
                }
            }," : "" }}
            {
                extend: 'colvis',
                text: '<i class=\"fas fa-columns\"></i> Columns',
                className: 'btn btn-secondary btn-sm'
            },
            {
                text: '<i class=\"fas fa-sync-alt\"></i> Refresh',
                className: 'btn btn-primary btn-sm',
                action: function(e, dt, node, config) {
                    dt.ajax.reload(null, false);
                    showNotification('Data refreshed successfully', 'success');
                }
            }
        ],
        drawCallback: function(settings) {
            // Initialize tooltips
            $('[data-toggle="tooltip"]').tooltip();
            
            {{ withBulk ? "// Update bulk action controls
            updateBulkActionControls();" : "" }}
            
            // Custom row styling
            $('#{{ routeName }}-table tbody tr').each(function() {
                const status = $(this).find('td').eq({{ withBulk ? '4' : '3' }}).text().trim();
                if (status === 'inactive') {
                    $(this).addClass('table-warning');
                }
            });
        },
        initComplete: function(settings, json) {
            console.log('{{ modelClass }} DataTable initialized successfully');
            
            // Custom search inputs
            this.api().columns().every(function() {
                const column = this;
                const columnIndex = column.index();
                
                // Add custom search functionality if needed
                if (columnIndex === 1) { // Name column
                    $('#search_name').on('keyup change', function() {
                        if (column.search() !== this.value) {
                            column.search(this.value).draw();
                        }
                    });
                }
            });
        }
    });

    {{ withBulk ? "// Bulk selection functionality
    $('#select-all').on('click', function() {
        const rows = table.rows({'search': 'applied'}).nodes();
        $('input[type=\"checkbox\"]', rows).prop('checked', this.checked);
        updateBulkActionControls();
    });

    $('#{{ routeName }}-table tbody').on('change', 'input[type=\"checkbox\"].row-select', function() {
        updateBulkActionControls();
        
        // Update select-all checkbox state
        const totalCheckboxes = $('#{{ routeName }}-table tbody input[type=\"checkbox\"].row-select').length;
        const checkedCheckboxes = $('#{{ routeName }}-table tbody input[type=\"checkbox\"].row-select:checked').length;
        
        const selectAllCheckbox = $('#select-all')[0];
        if (selectAllCheckbox) {
            selectAllCheckbox.indeterminate = checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes;
            selectAllCheckbox.checked = checkedCheckboxes === totalCheckboxes;
        }
    });" : "" }}

    // Advanced search functionality
    $('#advanced-search-form input').on('change', function() {
        table.draw();
    });

    // Clear search
    $('.clear-search').on('click', function() {
        $('#advanced-search-form')[0].reset();
        table.search('').columns().search('').draw();
        showNotification('Search filters cleared', 'info');
    });

    // Custom delete confirmation
    $('#{{ routeName }}-table').on('click', '.delete-btn', function(e) {
        e.preventDefault();
        const url = $(this).attr('href');
        const name = $(this).data('name') || 'this item';
        
        if (confirm(`Are you sure you want to delete "${name}"?`)) {
            $.ajax({
                url: url,
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                success: function(response) {
                    table.ajax.reload(null, false);
                    showNotification(response.message || 'Item deleted successfully', 'success');
                },
                error: function(xhr) {
                    const message = xhr.responseJSON?.message || 'Error deleting item';
                    showNotification(message, 'error');
                }
            });
        }
    });

    {{ cache ? "// Cache management
    $('.clear-cache').on('click', function() {
        $.ajax({
            url: '{{ route(\"{{ routeName }}.clear-cache\") }}',
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')
            },
            success: function(response) {
                table.ajax.reload(null, false);
                showNotification('Cache cleared and data refreshed', 'success');
            },
            error: function(xhr) {
                showNotification('Error clearing cache', 'error');
            }
        });
    });" : "" }}
});

{{ withBulk ? "// Bulk action functions
function updateBulkActionControls() {
    const selectedCount = $('#{{ routeName }}-table tbody input[type=\"checkbox\"].row-select:checked').length;
    $('#selected-count').text(selectedCount);
    
    if (selectedCount > 0) {
        $('#bulk-actions').slideDown();
    } else {
        $('#bulk-actions').slideUp();
    }
}

function executeBulkAction(action) {
    const selectedIds = [];
    $('#{{ routeName }}-table tbody input[type=\"checkbox\"].row-select:checked').each(function() {
        selectedIds.push($(this).val());
    });
    
    if (selectedIds.length === 0) {
        showNotification('Please select items to perform bulk action', 'warning');
        return;
    }
    
    let confirmMessage = '';
    switch (action) {
        case 'delete':
            confirmMessage = `Are you sure you want to delete ${selectedIds.length} selected items?`;
            break;
        case 'activate':
            confirmMessage = `Are you sure you want to activate ${selectedIds.length} selected items?`;
            break;
        case 'deactivate':
            confirmMessage = `Are you sure you want to deactivate ${selectedIds.length} selected items?`;
            break;
        default:
            confirmMessage = `Are you sure you want to perform this action on ${selectedIds.length} selected items?`;
    }
    
    if (!confirm(confirmMessage)) {
        return;
    }
    
    // Show loading state
    const originalText = $(`.bulk-action-${action}`).html();
    $(`.bulk-action-${action}`).html('<span class=\"spinner-border spinner-border-sm\" role=\"status\"></span> Processing...');
    $(`.bulk-action-${action}`).prop('disabled', true);
    
    $.ajax({
        url: '{{ route(\"{{ routeName }}.bulk\") }}',
        method: 'POST',
        data: {
            action: action,
            ids: selectedIds,
            _token: $('meta[name=\"csrf-token\"]').attr('content')
        },
        success: function(response) {
            const table = $('#{{ routeName }}-table').DataTable();
            table.ajax.reload(null, false);
            
            // Reset bulk controls
            $('#bulk-actions').slideUp();
            $('#select-all').prop('checked', false);
            
            showNotification(response.message || `Bulk ${action} completed successfully`, 'success');
        },
        error: function(xhr) {
            const message = xhr.responseJSON?.message || `Error performing bulk ${action}`;
            showNotification(message, 'error');
        },
        complete: function() {
            // Restore button state
            $(`.bulk-action-${action}`).html(originalText);
            $(`.bulk-action-${action}`).prop('disabled', false);
        }
    });
}" : "" }}

{{ withExports ? "// Export functions
function exportData(format) {
    const table = $('#{{ routeName }}-table').DataTable();
    const params = table.ajax.params();
    
    // Show loading state
    $(`.export-${format}`).html('<span class=\"spinner-border spinner-border-sm\" role=\"status\"></span> Exporting...');
    $(`.export-${format}`).prop('disabled', true);
    
    // Build export URL with current filters
    let exportUrl = `{{ route(\"{{ routeName }}.export\") }}/${format}?`;
    const urlParams = new URLSearchParams();
    
    // Add search parameters
    if (params.search && params.search.value) {
        urlParams.append('search', params.search.value);
    }
    
    // Add column-specific searches
    if (params.columns) {
        params.columns.forEach((column, index) => {
            if (column.search && column.search.value) {
                urlParams.append(`columns[${index}][search]`, column.search.value);
            }
        });
    }
    
    // Add ordering
    if (params.order) {
        params.order.forEach((order, index) => {
            urlParams.append(`order[${index}][column]`, order.column);
            urlParams.append(`order[${index}][dir]`, order.dir);
        });
    }
    
    exportUrl += urlParams.toString();
    
    // Create hidden link and click it
    const link = document.createElement('a');
    link.href = exportUrl;
    link.download = '';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Restore button state after delay
    setTimeout(() => {
        $(`.export-${format}`).html(`<i class=\"fas fa-file-${format === 'excel' ? 'excel' : format === 'csv' ? 'csv' : 'pdf'}\"></i> ${format.toUpperCase()}`);
        $(`.export-${format}`).prop('disabled', false);
        showNotification(`${format.toUpperCase()} export completed`, 'success');
    }, 2000);
}" : "" }}

// Utility functions
function showNotification(message, type = 'info') {
    const alertClass = type === 'success' ? 'alert-success' : 
                     type === 'error' ? 'alert-danger' : 
                     type === 'warning' ? 'alert-warning' : 'alert-info';
    
    const notification = $(`
        <div class="alert ${alertClass} alert-dismissible fade show notification-alert" role="alert">
            ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    `);
    
    $('#notification-container').append(notification);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        notification.alert('close');
    }, 5000);
}

// Initialize notification container if it doesn't exist
$(document).ready(function() {
    if ($('#notification-container').length === 0) {
        $('body').prepend('<div id="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;"></div>');
    }
});

{{ virtualScroll ? "// Virtual scrolling enhancements
$(document).ready(function() {
    if ($.fn.DataTable.Scroller) {
        $('#{{ routeName }}-table').DataTable().scroller.measure();
    }
});" : "" }}