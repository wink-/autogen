<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ modelNamespace }}\{{ modelClass }};
use Illuminate\Support\Facades\Cache;
use Livewire\Component;
use Livewire\WithPagination;

class {{ componentName }} extends Component
{
    use WithPagination;

    {{ properties }}

    protected $queryString = [
        'search' => ['except' => ''],
        'sortField' => ['except' => 'id'],
        'sortDirection' => ['except' => 'asc'],
        'perPage' => ['except' => 15],
        {{ withSearch ? "'searchName' => ['except' => ''],
        'searchEmail' => ['except' => ''],
        'dateFrom' => ['except' => ''],
        'dateTo' => ['except' => '']," : "" }}
    ];

    protected $listeners = [
        'refreshComponent' => '$refresh',
        {{ withBulk ? "'bulkActionCompleted' => 'handleBulkActionCompleted'," : "" }}
    ];

    public function mount()
    {
        // Initialize component
    }

    {{ queryMethod }}

    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortField = $field;
            $this->sortDirection = 'asc';
        }

        $this->resetPage();
        {{ getClearCacheCall() }}
    }

    public function updatedSearch()
    {
        $this->resetPage();
        {{ getClearCacheCall() }}
    }

    public function updatedPerPage()
    {
        $this->resetPage();
        {{ getClearCacheCall() }}
    }

    public function delete($id)
    {
        {{ modelClass }}::findOrFail($id)->delete();
        {{ getClearCacheCall() }}
        session()->flash('success', '{{ modelClass }} deleted successfully');
    }

    {{ searchMethods }}

    {{ bulkMethods }}

    {{ exportMethods }}

    {{ cacheImplementation }}

    {{ virtualScrollImplementation }}

    public function render()
    {
        return view('livewire.{{ viewPath }}', [
            'rows' => $this->rows,
        ]);
    }
}