<?php

return [
    /*
    |--------------------------------------------------------------------------
    | Factory Configuration
    |--------------------------------------------------------------------------
    |
    | This file contains configuration options for the AutoGen Factory package.
    |
    */

    /*
    |--------------------------------------------------------------------------
    | Factory Namespace
    |--------------------------------------------------------------------------
    |
    | This value determines the namespace that will be used for generated
    | factory classes. By default, this follows Laravel's convention.
    |
    */
    'namespace' => 'Database\\Factories',

    /*
    |--------------------------------------------------------------------------
    | Factory Path
    |--------------------------------------------------------------------------
    |
    | This value determines the path where factory files will be generated.
    | By default, factories are stored in the database/factories directory.
    |
    */
    'path' => database_path('factories'),

    /*
    |--------------------------------------------------------------------------
    | Default Template
    |--------------------------------------------------------------------------
    |
    | This value determines which template will be used by default when
    | generating factories. Available options: minimal, default, advanced
    |
    */
    'default_template' => 'default',

    /*
    |--------------------------------------------------------------------------
    | Default Locale
    |--------------------------------------------------------------------------
    |
    | This value determines the default locale for fake data generation.
    | This affects the language and format of generated fake data.
    |
    */
    'default_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Default Factory Count
    |--------------------------------------------------------------------------
    |
    | This value determines the default number of models to create when
    | using the factory without specifying a count.
    |
    */
    'default_count' => 10,

    /*
    |--------------------------------------------------------------------------
    | Generate States
    |--------------------------------------------------------------------------
    |
    | This value determines whether state methods should be generated by
    | default. States provide convenient ways to create models in specific
    | conditions (e.g., active, inactive, verified).
    |
    */
    'generate_states' => true,

    /*
    |--------------------------------------------------------------------------
    | Generate Relationships
    |--------------------------------------------------------------------------
    |
    | This value determines whether relationship methods should be generated
    | by default. These methods make it easy to create models with related
    | data for testing.
    |
    */
    'generate_relationships' => true,

    /*
    |--------------------------------------------------------------------------
    | Relationship Default Counts
    |--------------------------------------------------------------------------
    |
    | These values determine the default number of related models to create
    | for different types of relationships.
    |
    */
    'relationship_counts' => [
        'has_many' => 3,
        'belongs_to_many' => 3,
        'morph_many' => 2,
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Field Patterns
    |--------------------------------------------------------------------------
    |
    | You can define custom patterns for field names and their corresponding
    | faker methods. These patterns are checked before the default patterns.
    |
    */
    'custom_field_patterns' => [
        // '/^custom_field_pattern$/i' => '$this->faker->customMethod()',
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Data Type Mappings
    |--------------------------------------------------------------------------
    |
    | You can define custom mappings for database column types to faker
    | methods. These mappings are checked before the default mappings.
    |
    */
    'custom_data_types' => [
        // 'custom_type' => '$this->faker->customMethod()',
    ],

    /*
    |--------------------------------------------------------------------------
    | File Upload Configuration
    |--------------------------------------------------------------------------
    |
    | Configuration for handling file upload fields in factories.
    |
    */
    'file_uploads' => [
        'enabled' => true,
        'default_image_size' => [640, 480],
        'avatar_size' => [200, 200],
        'thumbnail_size' => [150, 150],
        'storage_disk' => 'public',
    ],

    /*
    |--------------------------------------------------------------------------
    | Sequence Configuration
    |--------------------------------------------------------------------------
    |
    | Configuration for sequence-based fake data generation.
    |
    */
    'sequences' => [
        'enabled' => true,
        'email_pattern' => 'user{index}@example.com',
        'username_pattern' => 'user{index}',
        'code_pattern' => '{index:6}', // 6-digit zero-padded
    ],

    /*
    |--------------------------------------------------------------------------
    | State Configuration
    |--------------------------------------------------------------------------
    |
    | Configuration for automatic state detection and generation.
    |
    */
    'states' => [
        'boolean_probability' => [
            'default' => 50,    // 50% true by default
            'active' => 80,     // 80% true for *_active fields  
            'enabled' => 70,    // 70% true for *_enabled fields
            'verified' => 60,   // 60% true for *_verified fields
        ],
        'status_values' => [
            'default' => ['active', 'inactive', 'pending'],
            'order' => ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],
            'post' => ['draft', 'published', 'archived'],
            'user' => ['active', 'inactive', 'suspended'],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Ignored Fields
    |--------------------------------------------------------------------------
    |
    | Fields that should be ignored when generating factory definitions.
    | These are typically handled automatically by Laravel or the database.
    |
    */
    'ignored_fields' => [
        'id',
        'created_at',
        'updated_at',
        'deleted_at',
        'remember_token',
        'email_verified_at',
    ],

    /*
    |--------------------------------------------------------------------------
    | Nullable Field Probability
    |--------------------------------------------------------------------------
    |
    | The probability (0.0 to 1.0) that nullable fields will have actual
    | values instead of null. Higher values mean more non-null values.
    |
    */
    'nullable_probability' => 0.9,

    /*
    |--------------------------------------------------------------------------
    | Unique Field Handling
    |--------------------------------------------------------------------------
    |
    | Configuration for handling unique database constraints in factories.
    |
    */
    'unique_fields' => [
        'use_sequences' => true,
        'max_attempts' => 10,
        'fallback_to_uuid' => true,
    ],
];